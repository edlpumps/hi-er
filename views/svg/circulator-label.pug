include common.pug

doctype xml
svg(id="label_svg", xmlns="http://www.w3.org/2000/svg", xmlns:xlink="http://www.w3.org/1999/xlink", version="1.1", width="620", height="850", preserveAspectRatio="xMinYMin meet", viewBox="0 0 620 620")

    defs
     include fonts.pug
    
    rect(x="0", y="0", rx="0", ry="0", width="620", height="850", style="fill:#FFFFFF;;stroke: #222222;;stroke-width:1;")
    image(x="25", y="15", height="100px", width="565px", xlink:href=logo)

    text(x="30", y="130", style="font-family: Arimo; font-weight:bold", font-size="18", text-anchor="start", fill="black") #{brand}

    text(x="30", y="150", style="font-family: Arimo", font-size="16", text-anchor="start", fill="black") Model #:
    text(x="110", y="150", style="font-family: Arimo;font-weight:bold", font-size="16", text-anchor="start", fill="black") #{basic_model}
      
    if waip
        text(x="565", y="130", style="font-family: Arimo; font-weight:bold", font-size="16", text-anchor="end", fill="black") WAIP: #{waip}

    //Black rectangle
    -var height = 170;
    rect(x="30", y=height, rx="0", ry="0", width="555", height="50", style="fill:#000000;stroke: #000000;stroke-width:1;")
    text(x="40", y=height+35, style="font-family: Arimo; font-weight:bold", font-size="25", text-anchor="start", fill="white") CIRCULATOR PUMP
    text(x="340", y=height+35, style="font-family: Arimo; font-weight:bold", font-size="25", text-anchor="start", fill="white") CEI:
    text(x="392", y=height+35, style="font-family: Arimo; font-weight:bold", font-size="25", text-anchor="start", fill="white") #{pei}
    text(x="463", y=height+35, style="font-family: Arimo; font-weight:bold", font-size="25", text-anchor="start", fill="white") (ER #{er_most_efficient}) 
    - height = height + 35 + 30;
    rect(x="30", y=height, rx="0", ry="0", width="555", height="220", style="fill:none;stroke: #000000;stroke-width:1;")

    - var tick = 0;
    - var scale_width = 500;
    - var start = 60;
    - var tick_distance = scale_width / 100
    - var x = start;
    - var v_start = 310;

    while tick < 101
        - var y1 = tick % 100 == 0 ? v_start+50 : v_start+80
        - var y2 = tick % 25 == 0 ? v_start+110 : v_start+95
        - var major = (tick % 100 == 0) || ( tick %25 == 0)
        - var color = tick % 25 == 0 ? 'black' : 'grey'
        if major
          line(x1=x, y1=y1, x2=x, y2=y2, stroke-width='2', stroke=color)

        - x += tick_distance
        - tick ++
    
    line(x1=start, y1=v_start+80, x2=(start + scale_width), y2=v_start+80, stroke-width='2', stroke='black')
    
    - var footer_x = 620;

    each which in ["most", "least"]
        - var er = er_most_efficient
        - var er_pos = er_most_pos 
        if which == "least"
            - er = er_least_efficient
            - er_pos = er_least_pos
        - var center = er_pos
        - var label_edge_padding = (32 * (er.toString().length - 1)) + 16;
        - var label_left = center - label_edge_padding;
        - var label_right = center + label_edge_padding;
        - var min_left = start - 20;
        - var max_right = start + scale_width + 20;
        - var label_align = label_left <= min_left ? "start" : label_right >= max_right ? "end" : "middle";
        - var label_pos = label_align == "start" ? min_left : label_align == "end" ? max_right : center;
        - var left = center - 10
        - var right = center + 10
        - var positions = center + "," + (v_start+55) + " " + left + "," + (v_start+30) +" " + right + "," + (v_start+30);    
        // this is the caret below the rating label
        polygon(fill="#000000", stroke="#000000", stroke-width="1", points=positions)
        // this is the rating label
        text(x=label_pos, y=v_start+20, style="font-family: Arimo; font-weight:bold", font-size="50", text-anchor=label_align, fill="#000000") #{er}

    text(x="320", y=height+30, style="font-family: Arimo; font-weight:bold", font-size="30", text-anchor="middle", fill="black") ENERGY RATING
    //Bar
    rect(x=er_least_pos, y=v_start+60, rx="0", ry="0", width=bar_width,  height="19", style="fill:#000000;stroke: #000000;stroke-width:1;")

    text(x="60", y=v_start+130, style="font-family: Arimo; font-weight:bold", font-size="16", text-anchor="start", fill="black") Least Efficient
    text(x="310", y=v_start+130, style="font-family: Arimo; font-weight:bold", font-size="16", text-anchor="middle", fill="grey") RANGE
    text(x="560", y=v_start+130, style="font-family: Arimo; font-weight:bold", font-size="16", text-anchor="end", fill="black") Most Efficient
    
        // single box = 267 pixels (555/2)
    // char size = 7mm (or 5mm if number is greater than 6 digits)
    - var large_box = 620;
    - var large_box_mid = large_box / 2; //310 pixels
    - var box_width = large_box_mid - 10 - 30; //270 pixels, 76mm
    // 1mm per 3.55pixels
    - var mm_to_pixels = 3.55;
    - var box_mid = box_width / 2;

    // Savings Data
    - var e_string = annual_energy_savings.string;
    - var e_savings = annual_energy_savings.value;
    - var c_string = annual_cost_savings.string;
    - var c_savings = annual_cost_savings.value;

    //Figure out the longest string to determine the font size
    - var max_len = Math.max(e_string.length, c_string.length);
    - var font_size = (max_len > 6 ? 35 : 50);
    - var char_size = (max_len > 6 ? 5 : 7); //mm
    - var comma_char_size = 4; //mm
    
    //Left - Annual Energy Savings
    - var e_len = e_savings.toString().length;
    - var kwh_pixels = 13 * mm_to_pixels;
    - var e_str_pixels = ((char_size * e_len) + (1 * (e_len-1))) * mm_to_pixels;
    - var e_middle = 30+box_mid;
    //Convert to mm and find midpoint
    - var comma_pixels = (e_string.split(",").length-1) * comma_char_size * mm_to_pixels;
    - var e_string_mid = (e_str_pixels + comma_pixels + kwh_pixels)/2;

    rect(x=30, y=v_start+160, rx="0", ry="0", width=box_width, height="100", style="fill:none;stroke: #000000;stroke-width:2;" )
    //text(x=e_middle, y=v_start+210, style="font-family: Arimo; font-weight:bold", font-size=font_size, text-anchor="start", fill="red") !
    text(x=e_middle-e_string_mid, y=v_start+210, style="font-family: Arimo; font-weight:bold", font-size=font_size, text-anchor="start", fill="black") #{e_string}
    text(x=e_middle+(e_string_mid-kwh_pixels)+3, y=v_start+210, style="font-family: Arimo; font-weight:bold", font-size="20", text-anchor="start", fill="black") kWh
    text(x=63, y=v_start+240, style="font-family: Arimo;", font-size="20", text-anchor="start", fill="black") Annual Energy Savings
    text(x=270, y=v_start+235, style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") &#x2021;
    
    //Right - Annual Cost Savings
    - var c_len = c_savings.toString().length-1; //Remove one for the decimal place
    - var c_str_pixels = ((char_size * (c_len+1)) + (1 * (c_len-1))) * mm_to_pixels;
    - comma_pixels = (c_string.split(",").length-1) * comma_char_size * mm_to_pixels;
    - comma_pixels += (comma_char_size * mm_to_pixels); //Add one for the decimal place
    - var c_string_mid = (c_str_pixels + comma_pixels)/2;
    - var c_middle = 30+box_width+20+box_mid;
    - var c_mm = ((char_size * (c_len+1)) + (1 * (c_len-1))) + ((c_string.split(",").length-1) * comma_char_size);

    rect(x=30+box_width+20, y=v_start+160, rx="0", ry="0", width=box_width, height="100", style="fill:none;stroke: #000000;stroke-width:2;" )
    //text(x=c_middle, y=v_start+210, style="font-family: Arimo; font-weight:bold", font-size=font_size, text-anchor="start", fill="red") !
    text(x=c_middle-c_string_mid, y=v_start+210, style="font-family: Arimo; font-weight:bold", font-size=font_size, text-anchor="start", fill="black") $#{c_string}
    text(x=30+box_width+63, y=v_start+240, style="font-family: Arimo;", font-size="20", text-anchor="start", fill="black") Annual Cost Savings
    text(x=278+box_width, y=v_start+235, style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") &#x2021;
    
    - var er_mm = er_pos / mm_to_pixels;

    //Bottom part
    -var footer_x = v_start + 290;
    text(x=36, y=footer_x, style="font-family: Arimo;", font-size="16", text-anchor="start",fill="black") The Energy Rating is dependent on the selected control method. Method(s)
    text(x=36, y=footer_x+=25, style="font-family: Arimo;", font-size="16", text-anchor="start",fill="black") available for this model are: 
    - footer_x+=20;
    - var num_methods = methods.length;
    - var x_offset = [90, 350];
    - var use_x_offset = x_offset[0];
    - for (var index = 0; index < num_methods; index++) {
        - var remainder = index % 2;
        if remainder === 0 
            - use_x_offset = x_offset[0];
            - footer_x+=20;
        else
            - use_x_offset = x_offset[1];
        text(x=use_x_offset, y=footer_x, style="font-family: Arimo;", font-size="16", text-anchor="start",fill="black") &#x2022; #{methods[index]}
    - }
    - footer_x = 720;
    text(x=36, y=footer_x-5, style="font-family: Arimo;", font-size="12", text-anchor="start",fill="black") &#x2021;
    text(x=43, y=footer_x, style="font-family: Arimo;", font-size="12", text-anchor="start",fill="black") Estimated annual savings are based on the most efficient rating available, #{annual_run_hours} annual run hours,
    text(x=43, y=(footer_x+=20), style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") and #{cost_per_kwh}&#x00a2; per kWh, when compared to the least efficient pump available in the market.  Actual savings 
    text(x=43, y=(footer_x+=20), style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") may vary. Visit the Circulator Pump Savings Calculator at www.pumps.org/cpsc.
    if meets_approval
        image(x=30, y=(footer_x+12), height="25px", width="25px", xlink:href=approval_check_logo) 
        text(x=58, y=(footer_x+=30), style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") Meets the #{reg_year} DOE circulator efficiency regulation.
   

    //Debug lines
    //text(x="28", y=(footer_x+=20), style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") Elen #{e_len} Epixels #{e_str_pixels} EMid: #{e_string_mid} middle #{e_middle} kwh #{kwh_mid_pixels} 
    //text(x="28", y=(footer_x+=20), style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") Distance #{distance} Er-Pos #{er_pos} er_mm #{er_mm}
    //text(x="28", y=(footer_x+=20), style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") EString #{e_string} len #{e_len} pixels #{e_str_pixels} EMid: #{e_string_mid} middle #{e_middle} char_size #{char_size} font_size #{font_size}
    //text(x="28", y=(footer_x+=20), style="font-family: Arimo;", font-size="12", text-anchor="start", fill="black") CString #{c_string} len #{c_len} mm #{c_mm} pixels #{c_str_pixels} CMid: #{c_string_mid} middle #{c_middle} char_size #{char_size} font_size #{font_size}
    
    +footer(30, 585, (footer_x+=40))


    //- rect(x=left_edge, y="230", rx="0", ry="0", width="555", height="210", style="fill:none;stroke: #000000;stroke-width:1;")
    //- line(x1=min_er, y1=er_line-er_tick, x2=min_er, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    //- line(x1=max_er, y1=er_line-er_tick, x2=max_er, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    //- line(x1=middle, y1=er_line, x2=middle, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    //- line(x1=q1_er, y1=er_line, x2=q1_er, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    //- line(x1=q3_er, y1=er_line, x2=q3_er, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    //- line(x1=min_er, y1=er_line, x2=max_er, y2=er_line, stroke-width="3", stroke="#000000")
    //- text(x=middle, y=230+2*lh, style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="25", text-anchor="middle", fill="black") ENERGY RATING
    //- text(x=min_er, y=er_line+er_tick+lh, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") Most Consumptive
    //- text(x=max_er, y=er_line+er_tick+lh, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="end", fill="black") Least Consumptive
    //- text(x=middle, y=er_line+er_tick+lh, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="middle", fill="black") RANGE
    
    //- text(x=er_rated_tick, y=er_line- tick_scale*1.2*lh,style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="34", text-anchor=l_anchor, fill="black") #{er}
    //- - var hw = 10;
    //- - var mps = `${er_rated_tick}, ${(er_line- er_tick)} ${er_rated_tick-hw}, ${er_line-tick_scale*lh} ${er_rated_tick+hw}, ${er_line-tick_scale*lh}`;    
    //- polygon(fill="#000000", stroke="#000000", stroke-width="1", points=mps)
    //- if dual
    //-     - var mps = `${er_most_consumptive}, ${(er_line- er_tick)} ${er_most_consumptive-hw}, ${er_line-tick_scale*lh} ${er_most_consumptive+hw}, ${er_line-tick_scale*lh}`;    
    //-     polygon(fill="#000000", stroke="#000000", stroke-width="1", points=mps)
    //-     text(x=er_most_consumptive-pull_offset, y=er_line- tick_scale*1.2*lh,style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="34", text-anchor=m_anchor, fill="black") #{er_most}
    //-     rect(x=Math.min(er_rated_tick, er_most_consumptive), y=er_line-er_tick+3, rx="0", ry="0", width=Math.abs(er_rated_tick-er_most_consumptive), height=er_tick-3, style="fill:#000000;stroke: #000000;stroke-width:1;")
    
    
    //- -var bt = 460;
    //- text(x=left_edge, y=bt style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") Note:  The ER value is dependent on the selected control.   Multiple options 
    //- text(x=left_edge, y=bt+lh, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") may be available on this pump, as follows:

    //- if ( methods.length > 0 ) 
    //-     text(x=left_edge, y=bt+lh*3, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[0]}
    //- if ( methods.length > 1 ) 
    //-     text(x=left_edge, y=bt+lh*4, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[1]}
    //- if ( methods.length > 2 ) 
    //-     text(x=left_edge, y=bt+lh*5, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[2]}

    //- if ( methods.length > 3 )   
    //-     text(x=middle,  y=bt+lh*3, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[3]}
    //- if ( methods.length > 4 ) 
    //-     text(x=middle,  y=bt+lh*4, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[4]}
    //- if ( methods.length > 5 ) 
    //-     text(x=middle, y=bt+lh*5,style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[5]}

    //- text(x=left_edge, y=bt+lh*7, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") Power savings (watts) over a baseline case can be estimated by multiplying  
    //- text(x=left_edge, y=bt+lh*8, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") the ER by WAIP and multiplying by 7.46.  Multiplying power savings by 
    //- text(x=left_edge, y=bt+lh*9, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") operating hours and cost of energy will yield estimated cost savings.

    //- text(x=left_edge, y=bt+lh*12, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") #{rating_id}
    //- text(x=middle, y=bt+lh*12, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="middle", fill="black") er.pumps.org
    //- text(x=right_edge, y=bt+lh*12, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="end", fill="black") #{date}
