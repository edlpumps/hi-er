include common.pug

doctype xml
svg(id="label_svg", xmlns="http://www.w3.org/2000/svg", xmlns:xlink="http://www.w3.org/1999/xlink", version="1.1", width="620", height="720", preserveAspectRatio="xMinYMin meet", viewBox="0 0 620 620")

    defs
     include fonts.pug
    
    -var tt = 135;
    -var lh = 18;
    -var left_edge = 30;
    -var right_edge = 585;
    -var middle = left_edge + (right_edge-left_edge)/2;
    -var min_er = left_edge + 30;
    -var max_er = right_edge - 30;
    -var q1_er = min_er + (max_er-min_er)/4;
    -var q3_er = min_er + 3*(max_er-min_er)/4;
    -var er_line = 390;
    -var er_tick = 20;
    -var tick_scale = 2.25;
    -var er_rated = min_er + er/max * (max_er-min_er);
    -var er_most_consumptive = min_er + er_most/max * (max_er-min_er);
    -var m_anchor = Math.abs(er-er_most) < 25 ? "end" : "middle";
    -var l_anchor = Math.abs(er-er_most) < 25 ? "start" : "middle";
    rect(x="0", y="0", rx="0", ry="0", width="620", height="720", style="fill:#FFFFFF;;stroke: #222222;;stroke-width:1;")
    image(x="25", y="15", height="100px", width="565px", xlink:href=logo)
    //-line(x1="21", y1="25", x2="21", y2="310", stroke-width="2", stroke="#000000")
    //-line(x1="595", y1="25", x2="595", y2="310", stroke-width="2", stroke="#000000")

    text(x="30", y=tt, style="font-family: 'Arimo'; font-weight:bold", font-size="16", text-anchor="start", fill="black") #{brand}
    //-text(x="330", y="150", style="font-family: 'Arimo'; font-weight:bold", font-size="16", text-anchor="start", fill="black") #{doe} Pump Type

    text(x="30", y=tt+lh*1.5 style="font-family: 'Arimo'", font-size="16", text-anchor="start", fill="black") Model #:
    //-text(x="30", y="210", style="font-family: 'Arimo'", font-size="16", text-anchor="start", fill="black") Nominal Speed:
    
    text(x="110", y=tt+lh*1.5, style="font-family: 'Arimo';font-weight:bold", font-size="16", text-anchor="start", fill="black") #{basic_model}
    //-text(x="155", y="210", style="font-family: 'Arimo';font-weight:bold", font-size="16", text-anchor="start", fill="black") #{speed}
    
    if waip
        text(x="585", y=tt, style="font-family: 'Arimo'; font-weight:bold", font-size="16", text-anchor="end", fill="black") WAIP: #{waip}
    //-text(x="330", y="210", style="font-family: 'Arimo'; font-weight:bold", font-size="16", text-anchor="start", fill="black") #{config}

    rect(x=left_edge, y="180", rx="0", ry="0", width="555", height="40", style="fill:#000000;stroke: #000000;stroke-width:1;")
    text(x=left_edge+5, y="207", style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="24", text-anchor="start", fill="white") CIRCULATOR PUMP
    text(x="340", y="207", style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="24", text-anchor="start", fill="white") PEI
    text(x="378", y="210", style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="10", text-anchor="start", fill="white") CIRC
    text(x="403", y="207", style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="24", text-anchor="start", fill="white") :  #{pei}
    text(x=right_edge-5, y="207", style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="24", text-anchor="end", fill="white") (ER #{er})

    rect(x=left_edge, y="230", rx="0", ry="0", width="555", height="210", style="fill:none;stroke: #000000;stroke-width:1;")
    line(x1=min_er, y1=er_line-er_tick, x2=min_er, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    line(x1=max_er, y1=er_line-er_tick, x2=max_er, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    line(x1=middle, y1=er_line, x2=middle, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    line(x1=q1_er, y1=er_line, x2=q1_er, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    line(x1=q3_er, y1=er_line, x2=q3_er, y2=er_line+er_tick, stroke-width="3", stroke="#000000")
    line(x1=min_er, y1=er_line, x2=max_er, y2=er_line, stroke-width="3", stroke="#000000")
    text(x=middle, y=230+2*lh, style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="25", text-anchor="middle", fill="black") ENERGY RATING
    text(x=min_er, y=er_line+er_tick+lh, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") Most Consumptive
    text(x=max_er, y=er_line+er_tick+lh, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="end", fill="black") Least Consumptive
    text(x=middle, y=er_line+er_tick+lh, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="middle", fill="black") RANGE
    
    text(x=er_rated, y=er_line- tick_scale*1.2*lh,style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="40", text-anchor=l_anchor, fill="black") #{er}
    - var hw = 10;
    - var mps = `${er_rated}, ${(er_line- er_tick)} ${er_rated-hw}, ${er_line-tick_scale*lh} ${er_rated+hw}, ${er_line-tick_scale*lh}`;    
    polygon(fill="#000000", stroke="#000000", stroke-width="1", points=mps)
    if dual
        - var mps = `${er_most_consumptive}, ${(er_line- er_tick)} ${er_most_consumptive-hw}, ${er_line-tick_scale*lh} ${er_most_consumptive+hw}, ${er_line-tick_scale*lh}`;    
        polygon(fill="#000000", stroke="#000000", stroke-width="1", points=mps)
        text(x=er_most_consumptive, y=er_line- tick_scale*1.2*lh,style="font-family: 'Arimo', Helvetica; font-weight:bold", font-size="40", text-anchor=m_anchor, fill="black") #{er_most}
        rect(x=Math.min(er_rated, er_most_consumptive), y=er_line-er_tick+3, rx="0", ry="0", width=Math.abs(er_rated-er_most_consumptive), height=er_tick-3, style="fill:#000000;stroke: #000000;stroke-width:1;")
    
    
    -var bt = 460;
    text(x=left_edge, y=bt style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") Note:  The ER value is dependent on the selected control.   Multiple options 
    text(x=left_edge, y=bt+lh, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") may be available on this pump, as follows:

    if ( methods.length > 0 ) 
        text(x=left_edge, y=bt+lh*3, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[0]}
    if ( methods.length > 1 ) 
        text(x=left_edge, y=bt+lh*4, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[1]}
    if ( methods.length > 2 ) 
        text(x=left_edge, y=bt+lh*5, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[2]}

    if ( methods.length > 3 )   
        text(x=middle,  y=bt+lh*3, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[3]}
    if ( methods.length > 4 ) 
        text(x=middle,  y=bt+lh*4, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[4]}
    if ( methods.length > 5 ) 
        text(x=middle, y=bt+lh*5,style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") &#183; #{methods[5]}

    text(x=left_edge, y=bt+lh*7, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") Power savings (watts) over a baseline case can be estimated by multiplying the
    text(x=left_edge, y=bt+lh*8, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") ER by WAIP and dividing by 100.  Multiplying power savings by operating hours
    text(x=left_edge, y=bt+lh*9, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") and cost of energy will yield estimated cost savings.

    text(x=left_edge, y=bt+lh*12, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="start", fill="black") Ref. 2222222
    text(x=middle, y=bt+lh*12, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="middle", fill="black") er.pumps.org
    text(x=right_edge, y=bt+lh*12, style="font-family: 'Arimo', Helvetica; ", font-size="16", text-anchor="end", fill="black") #{date}
